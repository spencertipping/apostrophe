# Linux/x86-64 bytecode dynamic compiler | Spencer Tipping
# Licensed under the terms of the MIT source code license

# Introduction.
# This compiler translates Apostrophe core-level bytecode into machine instructions and gives you a way to execute them. It is implemented as a concatentative language over %rsp. The mapping
# from (debatably) human-readable ASCII bytecode to instructions is achieved by using code in a lookup table referenced by %rbp. This mapping encodes SDoc syntax by redirecting all capital
# letters to functions which detect two newlines. All input is read from file descriptor 0 (stdin).

.section .rodata
  dispatch_table_mmap_error: .string "error: could not allocate dispatch table (mmap failed)\n"
  .size dispatch_table_mmap_error, 8

  stdin_buffer_mmap_error: .string "error: could not allocate execution buffer (mmap failed)\n"
  .size stdin_buffer_mmap_error, 8

.text
  .globl main
  .type main, @function

  main:
  xorq %rdi, %rdi

  exit:
  movq $60, %rax
  syscall

# Dispatch table setup.
# The initial dispatch table is dynamically allocated using mmap and initialized from assembly code. The permissions are then changed from write to execute using mprotect, which I believe is
# necessary to overcome OS or hardware-level security measures in certain cases.
# Generated by SDoc 
